import React, { useEffect, useState, useCallback, useRef  } from 'react';
import { LineChart } from 'react-native-wagmi-charts';
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Dimensions,
} from 'react-native';
import * as haptics from 'expo-haptics';
import axios from 'axios';
import Store from '../models/secureStore';
import AntDesign from '@expo/vector-icons/AntDesign';
import {
  useSharedValue,
  runOnJS
} from 'react-native-reanimated';

const Graph = () => {
  const [period, setPeriod] = useState('1W');
  const [equity, setEquity] = useState(0);
  const [data, setData] = useState([]);
  const [LineChartColor, setLineChartColor] = useState('#32d142');
  const [profitLossData , setProfitLossData] = useState(0);
  const [profitLossPercentData, setProfitLossPercentData] = useState(0);
  const [profitLoss, setProfitLoss] = useState(0);
  const [profitLossPercent, setProfitLossPercent] = useState(0);
  const dataRef = useRef(data);
  const profitLossDataRef = useRef(profitLossData);
  const profitLossPercentDataRef = useRef(profitLossPercentData);
  const [prompt, setPrompt] = useState('Past Week');
  const [baseValue, setBaseValue] = useState(0);
  const [isTouching, setIsTouching] = useState(false);
  const isTouchingRef = useRef(isTouching);
  const loss = useSharedValue(0);
  
  const loadData = async () => {
  const filteredData = await filterDataByPeriod();
  setEquity(parseFloat(filteredData[filteredData.length-1].value.toFixed(2)));
  if (filteredData[filteredData.length-1].value >= filteredData[0].value) {
    setLineChartColor('#32d142');
  } else {
    setLineChartColor('#ff3903');
  }
  setData(filteredData);
}

useEffect(() => { 
  loadData();
}, [period]);


// useEffect(() => {
//   dataRef.current = data;
// }, [data]); 

// useEffect(() => {
//   profitLossDataRef.current = profitLossData;
// }, [profitLossData]);

// useEffect(() => {
//   profitLossPercentDataRef.current = profitLossPercentData;
// }, [profitLossPercentData]);


const handleTimeframePress = (newTimeframe) => {
  setPeriod(newTimeframe);
};

const todayData = {
  "timestamp": [
      1683207000,
      1683207300,
      1683207600,
      1683207900,
      1683208200,
      1683208500,
      1683208800,
      1683209100,
      1683209400,
      1683209700,
      1683210000,
      1683210300,
      1683210600,
      1683210900,
      1683211200,
      1683211500,
      1683211800,
      1683212100,
      1683212400,
      1683212700,
      1683213000,
      1683213300,
      1683213600,
      1683213900,
      1683214200,
      1683214500,
      1683214800,
      1683215100,
      1683215400,
      1683215700,
      1683216000,
      1683216300,
      1683216600,
      1683216900,
      1683217200,
      1683217500,
      1683217800,
      1683218100,
      1683218400,
      1683218700,
      1683219000,
      1683219300,
      1683219600,
      1683219900,
      1683220200,
      1683220500,
      1683220800,
      1683221100,
      1683221400,
      1683221700,
      1683222000,
      1683222300,
      1683222600,
      1683222900,
      1683223200,
      1683223500,
      1683223800,
      1683224100,
      1683224400,
      1683224700,
      1683225000,
      1683225300,
      1683225600,
      1683225900,
      1683226200,
      1683226500,
      1683226800,
      1683227100,
      1683227400,
      1683227700,
      1683228000,
      1683228300,
      1683228600,
      1683228900,
      1683229200,
      1683229500,
      1683229800,
      1683230100,
      1683230400
  ],
  "equity": [
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35
  ],
  "profit_loss": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
  ],
  "profit_loss_pct": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
  ],
  "base_value": 100511.35,
  "timeframe": "5Min"
}

const weekData = {
  "timestamp": [
      1682688600,
      1682689500,
      1682690400,
      1682691300,
      1682692200,
      1682693100,
      1682694000,
      1682694900,
      1682695800,
      1682696700,
      1682697600,
      1682698500,
      1682699400,
      1682700300,
      1682701200,
      1682702100,
      1682703000,
      1682703900,
      1682704800,
      1682705700,
      1682706600,
      1682707500,
      1682708400,
      1682709300,
      1682710200,
      1682711100,
      1682712000,
      1682947800,
      1682948700,
      1682949600,
      1682950500,
      1682951400,
      1682952300,
      1682953200,
      1682954100,
      1682955000,
      1682955900,
      1682956800,
      1682957700,
      1682958600,
      1682959500,
      1682960400,
      1682961300,
      1682962200,
      1682963100,
      1682964000,
      1682964900,
      1682965800,
      1682966700,
      1682967600,
      1682968500,
      1682969400,
      1682970300,
      1682971200,
      1683034200,
      1683035100,
      1683036000,
      1683036900,
      1683037800,
      1683038700,
      1683039600,
      1683040500,
      1683041400,
      1683042300,
      1683043200,
      1683044100,
      1683045000,
      1683045900,
      1683046800,
      1683047700,
      1683048600,
      1683049500,
      1683050400,
      1683051300,
      1683052200,
      1683053100,
      1683054000,
      1683054900,
      1683055800,
      1683056700,
      1683057600,
      1683120600,
      1683121500,
      1683122400,
      1683123300,
      1683124200,
      1683125100,
      1683126000,
      1683126900,
      1683127800,
      1683128700,
      1683129600,
      1683130500,
      1683131400,
      1683132300,
      1683133200,
      1683134100,
      1683135000,
      1683135900,
      1683136800,
      1683137700,
      1683138600,
      1683139500,
      1683140400,
      1683141300,
      1683142200,
      1683143100,
      1683144000,
      1683207000,
      1683207900,
      1683208800,
      1683209700,
      1683210600,
      1683211500,
      1683212400,
      1683213300,
      1683214200,
      1683215100,
      1683216000,
      1683216900,
      1683217800,
      1683218700,
      1683219600,
      1683220500,
      1683221400,
      1683222300,
      1683223200,
      1683224100,
      1683225000,
      1683225900,
      1683226800,
      1683227700,
      1683228600,
      1683229500,
      1683230400
  ],
  "equity": [
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35
  ],
  "profit_loss": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
  ],
  "profit_loss_pct": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
  ],
  "base_value": 100511.35,
  "timeframe": "15Min"
}

const monthData = {
  "timestamp": [
      1680652800,
      1680739200,
      1680825600,
      1681171200,
      1681257600,
      1681344000,
      1681430400,
      1681516800,
      1681776000,
      1681862400,
      1681948800,
      1682035200,
      1682121600,
      1682380800,
      1682467200,
      1682553600,
      1682640000,
      1682726400,
      1682985600,
      1683072000,
      1683158400,
      1683244800
  ],
  "equity": [
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      99999.69972361941,
      99998.62343980902,
      99998.02175719278,
      99944.6415883984,
      99889.68411761933,
      99815.78920812515,
      99812.45420758217,
      99811.51666084577,
      99656.86021570799,
      99696.82959104248,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35
  ],
  "profit_loss": [
      0,
      0,
      0,
      0,
      0,
      0,
      -0.280470457387891,
      -1.07628381039,
      -0.60168261624,
      -53.38016790783,
      -54.95747077908,
      -73.89490949417,
      -3.33500054298,
      -0.93754673641,
      -154.65644513777,
      39.96937533449,
      814.7156050506295,
      0,
      0,
      0,
      0,
      0
  ],
  "profit_loss_pct": [
      0,
      0,
      0,
      0,
      0,
      0,
      -0.0000028047045739,
      -0.000013567544809528097,
      -0.000019584372163645778,
      -0.0005533861569665882,
      -0.0011029609736109287,
      -0.0018419102149153095,
      -0.0018752602269507283,
      -0.001884635696171862,
      -0.003431200453875608,
      -0.0030315066213639228,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985
  ],
  "base_value": 100000,
  "timeframe": "1D"
}

const threeMonthData = {
  "timestamp": [
      1675731600,
      1675818000,
      1675904400,
      1675990800,
      1676077200,
      1676336400,
      1676422800,
      1676509200,
      1676595600,
      1676682000,
      1677027600,
      1677114000,
      1677200400,
      1677286800,
      1677546000,
      1677632400,
      1677718800,
      1677805200,
      1677891600,
      1678150800,
      1678237200,
      1678323600,
      1678410000,
      1678496400,
      1678752000,
      1678838400,
      1678924800,
      1679011200,
      1679097600,
      1679356800,
      1679443200,
      1679529600,
      1679616000,
      1679702400,
      1679961600,
      1680048000,
      1680134400,
      1680220800,
      1680307200,
      1680566400,
      1680652800,
      1680739200,
      1680825600,
      1681171200,
      1681257600,
      1681344000,
      1681430400,
      1681516800,
      1681776000,
      1681862400,
      1681948800,
      1682035200,
      1682121600,
      1682380800,
      1682467200,
      1682553600,
      1682640000,
      1682726400,
      1682985600,
      1683072000,
      1683158400,
      1683244800
  ],
  "equity": [
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      99999.69972361941,
      99998.62343980902,
      99998.02175719278,
      99944.6415883984,
      99889.68411761933,
      99815.78920812515,
      99812.45420758217,
      99811.51666084577,
      99656.86021570799,
      99696.82959104248,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35
  ],
  "profit_loss": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -0.280470457387891,
      -1.07628381039,
      -0.60168261624,
      -53.38016790783,
      -54.95747077908,
      -73.89490949417,
      -3.33500054298,
      -0.93754673641,
      -154.65644513777,
      39.96937533449,
      814.7156050506295,
      0,
      0,
      0,
      0,
      0
  ],
  "profit_loss_pct": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -0.0000028047045739,
      -0.000013567544809528097,
      -0.000019584372163645778,
      -0.0005533861569665882,
      -0.0011029609736109287,
      -0.0018419102149153095,
      -0.0018752602269507283,
      -0.001884635696171862,
      -0.003431200453875608,
      -0.0030315066213639228,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985
  ],
  "base_value": 100000,
  "timeframe": "1D"
}

const yearData = {
  "timestamp": [
      1651708800,
      1651795200,
      1651881600,
      1652140800,
      1652227200,
      1652313600,
      1652400000,
      1652486400,
      1652745600,
      1652832000,
      1652918400,
      1653004800,
      1653091200,
      1653350400,
      1653436800,
      1653523200,
      1653609600,
      1653696000,
      1654041600,
      1654128000,
      1654214400,
      1654300800,
      1654560000,
      1654646400,
      1654732800,
      1654819200,
      1654905600,
      1655164800,
      1655251200,
      1655337600,
      1655424000,
      1655510400,
      1655856000,
      1655942400,
      1656028800,
      1656115200,
      1656374400,
      1656460800,
      1656547200,
      1656633600,
      1656720000,
      1657065600,
      1657152000,
      1657238400,
      1657324800,
      1657584000,
      1657670400,
      1657756800,
      1657843200,
      1657929600,
      1658188800,
      1658275200,
      1658361600,
      1658448000,
      1658534400,
      1658793600,
      1658880000,
      1658966400,
      1659052800,
      1659139200,
      1659398400,
      1659484800,
      1659571200,
      1659657600,
      1659744000,
      1660003200,
      1660089600,
      1660176000,
      1660262400,
      1660348800,
      1660608000,
      1660694400,
      1660780800,
      1660867200,
      1660953600,
      1661212800,
      1661299200,
      1661385600,
      1661472000,
      1661558400,
      1661817600,
      1661904000,
      1661990400,
      1662076800,
      1662163200,
      1662508800,
      1662595200,
      1662681600,
      1662768000,
      1663027200,
      1663113600,
      1663200000,
      1663286400,
      1663372800,
      1663632000,
      1663718400,
      1663804800,
      1663891200,
      1663977600,
      1664236800,
      1664323200,
      1664409600,
      1664496000,
      1664582400,
      1664841600,
      1664928000,
      1665014400,
      1665100800,
      1665187200,
      1665446400,
      1665532800,
      1665619200,
      1665705600,
      1665792000,
      1666051200,
      1666137600,
      1666224000,
      1666310400,
      1666396800,
      1666656000,
      1666742400,
      1666828800,
      1666915200,
      1667001600,
      1667260800,
      1667347200,
      1667433600,
      1667520000,
      1667606400,
      1667869200,
      1667955600,
      1668042000,
      1668128400,
      1668214800,
      1668474000,
      1668560400,
      1668646800,
      1668733200,
      1668819600,
      1669078800,
      1669165200,
      1669251600,
      1669413600,
      1669683600,
      1669770000,
      1669856400,
      1669942800,
      1670029200,
      1670288400,
      1670374800,
      1670461200,
      1670547600,
      1670634000,
      1670893200,
      1670979600,
      1671066000,
      1671152400,
      1671238800,
      1671498000,
      1671584400,
      1671670800,
      1671757200,
      1671843600,
      1672189200,
      1672275600,
      1672362000,
      1672448400,
      1672794000,
      1672880400,
      1672966800,
      1673053200,
      1673312400,
      1673398800,
      1673485200,
      1673571600,
      1673658000,
      1674003600,
      1674090000,
      1674176400,
      1674262800,
      1674522000,
      1674608400,
      1674694800,
      1674781200,
      1674867600,
      1675126800,
      1675213200,
      1675299600,
      1675386000,
      1675472400,
      1675731600,
      1675818000,
      1675904400,
      1675990800,
      1676077200,
      1676336400,
      1676422800,
      1676509200,
      1676595600,
      1676682000,
      1677027600,
      1677114000,
      1677200400,
      1677286800,
      1677546000,
      1677632400,
      1677718800,
      1677805200,
      1677891600,
      1678150800,
      1678237200,
      1678323600,
      1678410000,
      1678496400,
      1678752000,
      1678838400,
      1678924800,
      1679011200,
      1679097600,
      1679356800,
      1679443200,
      1679529600,
      1679616000,
      1679702400,
      1679961600,
      1680048000,
      1680134400,
      1680220800,
      1680307200,
      1680566400,
      1680652800,
      1680739200,
      1680825600,
      1681171200,
      1681257600,
      1681344000,
      1681430400,
      1681516800,
      1681776000,
      1681862400,
      1681948800,
      1682035200,
      1682121600,
      1682380800,
      1682467200,
      1682553600,
      1682640000,
      1682726400,
      1682985600,
      1683072000,
      1683158400,
      1683244800
  ],
  "equity": [
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      100000,
      99999.69972361941,
      99998.62343980902,
      99998.02175719278,
      99944.6415883984,
      99889.68411761933,
      99815.78920812515,
      99812.45420758217,
      99811.51666084577,
      99656.86021570799,
      99696.82959104248,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35
  ],
  "profit_loss": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -0.280470457387891,
      -1.07628381039,
      -0.60168261624,
      -53.38016790783,
      -54.95747077908,
      -73.89490949417,
      -3.33500054298,
      -0.93754673641,
      -154.65644513777,
      39.96937533449,
      814.7156050506295,
      0,
      0,
      0,
      0,
      0
  ],
  "profit_loss_pct": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -0.0000028047045739,
      -0.000013567544809528097,
      -0.000019584372163645778,
      -0.0005533861569665882,
      -0.0011029609736109287,
      -0.0018419102149153095,
      -0.0018752602269507283,
      -0.001884635696171862,
      -0.003431200453875608,
      -0.0030315066213639228,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985
  ],
  "base_value": 100000,
  "timeframe": "1D"
}

const allData = {
  "timestamp": [
      1681257600,
      1681344000,
      1681430400,
      1681516800,
      1681776000,
      1681862400,
      1681948800,
      1682035200,
      1682121600,
      1682380800,
      1682467200,
      1682553600,
      1682640000,
      1682726400,
      1682985600,
      1683072000,
      1683158400,
      1683244800,
      1683331200,
      1683590400,
      1683676800,
      1683763200,
      1683849600,
      1683936000,
      1684195200,
      1684281600,
      1684368000,
      1684454400,
      1684540800,
      1684800000,
      1684886400,
      1684972800,
      1685059200,
      1685145600,
      1685491200,
      1685577600,
      1685649600
  ],
  "equity": [
      100000,
      100000,
      99999.69972361941,
      99998.62343980902,
      99998.02175719278,
      99944.6415883984,
      99889.68411761933,
      99815.78920812515,
      99812.45420758217,
      99811.51666084577,
      99656.86021570799,
      99696.82959104248,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35,
      100511.35
  ],
  "profit_loss": [
      0,
      0,
      -0.280470457387891,
      -1.07628381039,
      -0.60168261624,
      -53.38016790783,
      -54.95747077908,
      -73.89490949417,
      -3.33500054298,
      -0.93754673641,
      -154.65644513777,
      39.96937533449,
      814.7156050506295,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
  ],
  "profit_loss_pct": [
      0,
      0,
      -0.0000028047045739,
      -0.000013567544809528097,
      -0.000019584372163645778,
      -0.0005533861569665882,
      -0.0011029609736109287,
      -0.0018419102149153095,
      -0.0018752602269507283,
      -0.001884635696171862,
      -0.003431200453875608,
      -0.0030315066213639228,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0.0051156510428389985,
      0
  ],
  "base_value": 100000,
  "timeframe": "1D"
}

const filterDataByPeriod = async () => {
  // Figure out the cutoff date base on what period is selected
  const now = new Date().getTime() / 1000;
  let timeframe;
  let response;
  switch (period) {
    case '1D':
      setPrompt('Today');
      timeframe = '5Min';
      reponse = todayData;
      break;
    case '1W':
      setPrompt('Past Week');
      timeframe = '15Min';
      response = weekData;
      break;
    case '1M':
      setPrompt('Past Month');
      timeframe = '1D';
      response = monthData;
      break;
    case '3M':
      setPrompt('Past 3 Months');
      timeframe = '1D';
      response = threeMonthData;
      break;
    case '1Y':
      setPrompt('Past Year');
      timeframe = '1D';
      response = yearData;
      break;
    case 'All':
      setPrompt('All Time');
      timeframe = '1D';
      response = allData;
    default:
  }
  // calculate end date
  const nowFormatted = new Date(now*1000).toISOString().slice(0, 10);
  // setup config for the request
  const token = await Store.get('token');
  // const config = {
  //   "period": period === '1Y' ? '1A' : period,
  //   "timeframe": timeframe,
  //   "extended_hours": false
  // }
  // const headers = { headers: { Authorization: `Bearer ${token}` } }
  // make request
  //const response = await axios.post('http://192.168.1.13:8080/user/setup', config, headers)
  // format data
  setProfitLossData(response.profit_loss);
  setProfitLossPercentData(response.profit_loss_pct);
  setBaseValue(response.base_value);
  setProfitLoss(parseFloat(response.equity[response.equity.length-1] - response.base_value).toFixed(2));
  const result = response.timestamp.map((timestamp, index) => {
    return {
      timestamp: timestamp,
      value: response.equity[index],
    };
  }).filter(item => item.value !== null);
  return result;
};

const invokeHaptic = () => {
console.log(isTouching)
setIsTouching(true);
haptics.impactAsync(haptics.ImpactFeedbackStyle.Light);
}


const endTouch = () => {
setIsTouching(false);
setEquity(parseFloat(data[data.length-1].value.toFixed(2)));
setProfitLoss(parseFloat(data[data.length-1].value - baseValue).toFixed(2));
setProfitLossPercent(0)
switch (period) {
  case '1D':
    setPrompt('Today');
    break;
  case '1W':
    setPrompt('Past Week');
    break;
  case '1M':
    setPrompt('Past Month');
    break;
  case '3M':
    setPrompt('Past 3 Months');
    break;
  case '1Y':
    setPrompt('Past Year');
    break;
  case 'All':
    setPrompt('All Time');
    break;
  default:
haptics.impactAsync(haptics.ImpactFeedbackStyle.Light);
}
}

function formatDateLong(timestamp, period) {
'worklet'
let displayTime;
let date;
let months;
let month;
let day;
let year;
let hours;
let minutes;
let ampm;
let formattedHours;
let formattedMinutes;
switch (period) {
  case '1D':
    date = new Date(timestamp*1000);
    hours = date.getHours();
    minutes = date.getMinutes();
    ampm = hours >= 12 ? 'PM' : 'AM';
    formattedHours = hours % 12 || 12;
    formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
    displayTime = `${formattedHours}:${formattedMinutes} ${ampm}`;
    break;
  case '1W':
    date = new Date(timestamp*1000);
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    hours = date.getHours();
    minutes = date.getMinutes();
    ampm = hours >= 12 ? 'PM' : 'AM';
    formattedHours = hours % 12 || 12;
    formattedMinutes = minutes < 10 ? '0' + minutes : minutes;
    displayTime = `${formattedHours}:${formattedMinutes} ${ampm}, ${months[date.getMonth()]} ${date.getDate()}`;;
    break;
  case '1M':
    date = new Date(timestamp*1000);
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    month = months[date.getMonth()];
    day = String(date.getDate()).padStart(2, '0');
    year = date.getFullYear();
    displayTime = `${month}, ${day} ${year}`;
    break;
  case '3M':
    date = new Date(timestamp*1000);
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    month = months[date.getMonth()];
    day = String(date.getDate()).padStart(2, '0');
    year = date.getFullYear();
    displayTime = `${month}, ${day} ${year}`;
    break;
  case '1Y':
    date = new Date(timestamp*1000);
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    month = months[date.getMonth()];
    day = String(date.getDate()).padStart(2, '0');
    year = date.getFullYear();
    displayTime = `${month}, ${day} ${year}`;
    break;
  case 'All':
    date = new Date(timestamp*1000);
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    month = months[date.getMonth()];
    day = String(date.getDate()).padStart(2, '0');
    year = date.getFullYear();
    displayTime = `${month}, ${day} ${year}`;
  default:
    
}
return displayTime;
};

// function getPrompt() {
//   if (profitLossPercent !== 0) {
//     return <View style={styles.prompt}><AntDesign name={[profitLossPercent < 0 ? 'caretdown' : 'caretup']} style={[profitLossPercent < 0 ? {color: '#ff3903'} : {color: '#32d142'}]}/><Text style={[profitLossPercent < 0 ? {color: '#ff3903'} : {color: '#32d142'}]}>  ${Math.abs(profitLoss)} {Math.abs(profitLossPercent)}%</Text></View>
//   } else {
//     <View style={styles.prompt}><AntDesign name={[profitLossPercent < 0 ? 'caretdown' : 'caretup']} style={[profitLossPercent < 0 ? {color: '#ff3903'} : {color: '#32d142'}]}/><Text style={[profitLossPercent < 0 ? {color: '#ff3903'} : {color: '#32d142'}]}> ${Math.abs(profitLoss)}</Text>{ isTouching ? null : <Text> {prompt}</Text>}</View>
//   }
// }

function renderProfitLoss() {
  return (
    <View style={styles.prompt}>
      <AntDesign
        name={profitLossPercent < 0 ? 'caretdown' : 'caretup'}
        style={profitLossPercent < 0 ? { color: '#ff3903' } : { color: '#32d142' }}
      />
      {profitLossPercent !== 0 ? (
        <Text style={profitLossPercent < 0 ? { color: '#ff3903' } : { color: '#32d142' }}>
          ${Math.abs(profitLoss)} {Math.abs(profitLossPercent)}%
        </Text>
      ) : (
        <>
          <Text style={profitLossPercent < 0 ? { color: '#ff3903' } : { color: '#32d142' }}>
            ${Math.abs(profitLoss)}
          </Text>
          {isTouching ? null : <Text> {prompt}</Text>}
        </>
      )}
    </View>
  );
}


// const onCurrentIndexChange = useCallback(
// (index) => {
//   //console.log(isTouching)
//   if (!isTouching) {
//   setEquity(parseFloat(dataRef.current[index].value.toFixed(2)));
//   setProfitLoss(parseFloat(profitLossDataRef.current[index].toFixed(2)));
//   setProfitLossPercent(parseFloat((profitLossPercentDataRef.current[index]*100).toFixed(2)));
//   }
// },
// []
// );

 const onCurrentIndexChange = useCallback(
(value) => {
  //console.log(isTouching)
  if (!isTouching) {
    setEquity(value);
    //setProfitLoss(parseFloat(value-baseValue).toFixed(2));
    //setProfitLossPercent(parseFloat(((value-baseValue)/baseValue)*100).toFixed(2));
  //setEquity(parseFloat(dataRef.current[index].value.toFixed(2)));
  // setProfitLoss(parseFloat(profitLossDataRef.current[index].toFixed(2)));
  // setProfitLossPercent(parseFloat((profitLossPercentDataRef.current[index]*100).toFixed(2)));
  }
},
[]
);
 

  return(   
      <View>
          <View style={styles.valueBox}>
            <Text style={styles.totalValueTitle}>Portfolio </Text>
            <Text style={styles.totalValue}>${equity}</Text>
                </View>
                  <View style={styles.bottomContainer}>
                  <View >
                {data.length === 0 ? <Text style={styles.emptyText}>No data to display</Text> :
                <LineChart.Provider data={data} >
                  {!isTouching ? <Text style={styles.totalValue}>${equity}</Text>: 
                  <View>
                  <LineChart.PriceText style={styles.totalValue} format={({value}) => {
                      'worklet'
                      runOnJS(onCurrentIndexChange)(value)
                      return `$${value}`}}
                      />
                 
                  </View>}
                  {renderProfitLoss()}
                <LineChart width={Dimensions.get('window').width} height={150}>
                  <LineChart.Path color={LineChartColor}></LineChart.Path>
                  <LineChart.CursorLine/>
                  <LineChart.CursorCrosshair color={LineChartColor} onActivated={invokeHaptic} onEnded={endTouch} minDurationMs={100}>
                  <LineChart.Tooltip cursorGutter={100} position="top">
                    <LineChart.DatetimeText format={({value}) => {
                      'worklet'
                      const dateval = formatDateLong(value, period)
                      return dateval}}/>
                  </LineChart.Tooltip>
                </LineChart.CursorCrosshair>
                </LineChart>
              </LineChart.Provider>
              }
              </View>
              <View style={styles.periodTabs}>
                {['1D', '1W', '1M', '3M', '1Y', 'All'].map((tf) => (
                  <TouchableOpacity key={tf} style={[{ borderRadius: 5 }, period === tf ? styles.activeTimeframe && {backgroundColor: LineChartColor}: styles.activeTimeframe && {backgroundColor: "transparent"}]} onPress={() => handleTimeframePress(tf)}>
                    <Text style={[styles.periodText, period === tf ? { color: "#fff"} : {color: LineChartColor}]}>{tf}</Text>
                  </TouchableOpacity>
                ))}
              </View>
              <View style={styles.separator} />
                <View/>
        </View>
    </View>
);
};

const styles = StyleSheet.create({
    prompt: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    valueBox: {
      flex: 1,
      flexDirection: 'column',
      marginLeft: 16,
      alignItems: 'flex-start',
    },
    tooltip: {
      backgroundColor: 'black',
      borderRadius: 4,
      color: 'white',
      fontSize: 18,
      padding: 4,
    },
    graphContainer: {
      width: 170,
      alignItems: 'center',
      height: 170,
      marginTop: 64,
      marginBottom: 0
    },
    wrapper: {
        flex: 1,
        backgroundColor: '#fff',
        },
    container: {
      flexGrow: 1,
      justifyContent: 'space-around',
      backgroundColor: '#fff',
      paddingVertical: 20,
    },
    bottomContainer: {
      justifyContent: 'space-evenly',
      alignItems: 'center',
      backgroundColor: '#fff',
    },
    totalValueTitle: {
      marginBottom: 10,
      marginTop: 20,
      fontSize: 32,
      color: '#121212',
    },
    totalValue: {
      fontSize: 32,
      color: '#121212',
    },
    buyingPower: {
      fontSize: 18,
      fontWeight: 'bold',
      color: '#c76982',
    },
    dayTraderStatus: {
      fontSize: 18,
      fontWeight: 'bold',
      color: '#ad2139',
    },
    separator: {
      height: 1,
      width: '80%',
      backgroundColor: 'lightgray',
      marginVertical: 20,
    },
    graphPlaceholder: {
      fontSize: 16,
      color: '#c76982',
    },
    scaleTabs: {
      flexDirection: 'row',
      justifyContent: 'space-around',
    },
      periodTabs: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      width: '100%',
      paddingHorizontal: 50,
      },
      periodText: {
      borderRadius: 5,
      padding: 4,
      fontSize: 16,
      fontWeight: 'bold',
      },
      activeTimeframe: {
      backgroundColor: '#c76982',
      },
      creatorList: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-evenly',
      width: '100%',
      },
      creatorCard: {
      width: '50%',
      height: 150,
      backgroundColor: '#2f1412',
      borderRadius: 10,
      marginVertical: 10,
      padding: 10,
      justifyContent: 'space-evenly',
      alignItems: 'center',
      },
      profile: {
      flexDirection: 'row',
      alignItems: 'center',
      },
      profilePicture: {
      width: 50,
      height: 50,
      borderRadius: 25,
      backgroundColor: '#c76982',
      },
      username: {
      fontSize: 16,
      fontWeight: 'bold',
      color: '#e7a0ae',
      marginLeft: 10,
      },
      graph: {
        alignSelf: 'center',
        width: '100%',
        aspectRatio: 1.4,
        marginVertical: 20,
      },
      gainLoss: {
      fontSize: 16,
      fontWeight: 'bold',
      color: '#c76982',
      },
      ordersToday: {
      fontSize: 16,
      fontWeight: 'bold',
      color: '#ad2139',
      },
      addButton: {
      width: 50,
      height: 50,
      borderRadius: 25,
      backgroundColor: '#c76982',
      justifyContent: 'center',
      alignItems: 'center',
      },
      addButtonText: {
      fontSize: 32,
      fontWeight: 'bold',
      color: '#2f1412',
      },
  });

export default Graph;